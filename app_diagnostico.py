import streamlit as st
import pandas as pd
import plotly.express as px
# Importa a fun√ß√£o do novo arquivo de conector
from db_connector_diagnostico import carregar_dados_do_banco

# --- Configura√ß√µes da P√°gina ---
st.set_page_config(
    page_title="Dashboard de An√°lise de OS",
    page_icon="üõ†Ô∏è",
    layout="wide"
)

# --- Fun√ß√µes Auxiliares ---
@st.cache_data
def convert_df_to_csv(df):
    """Converte um DataFrame para CSV para download."""
    df_export = df.rename(columns={
        'Matr√≠cula': 'imov_id', 
        'Localidade': 'loca_id',
        'Data de Gera√ß√£o': 'data_geracao',
        'Data de Conclus√£o': 'data_conclusao',
        'Tipo de Servi√ßo': 'tipo_servico',
        'Status': 'status_os',
        'Descri√ß√£o do Servi√ßo': 'descricao_servico',
        'Motivo do Encerramento': 'motivo_encerramento'
    })
    return df_export.to_csv(index=False).encode('utf-8-sig')

# --- Carregamento dos Dados ---
df_original = carregar_dados_do_banco()

# --- T√≠tulo e Descri√ß√£o ---
st.title("üõ†Ô∏è Dashboard de An√°lise de Ordens de Servi√ßo")
st.markdown("An√°lise de OS de Diagn√≥stico, Sondagem e Supress√£o.")

# --- Sidebar de Filtros ---
st.sidebar.header("Filtros Interativos")

if df_original.empty:
    st.warning("N√£o foi poss√≠vel carregar os dados. Verifique a conex√£o com o banco de dados.")
else:
    # Renomeia as colunas para exibi√ß√£o no dashboard
    df_original.rename(columns={
        'imov_id': 'Matr√≠cula', 
        'loca_id': 'Localidade',
        'data_geracao': 'Data de Gera√ß√£o',
        'data_conclusao': 'Data de Conclus√£o',
        'tipo_servico': 'Tipo de Servi√ßo',
        'status_os': 'Status',
        'descricao_servico': 'Descri√ß√£o do Servi√ßo',
        'motivo_encerramento': 'Motivo do Encerramento'
    }, inplace=True)

    # Filtro por Localidade
    localidades = sorted(df_original['Localidade'].unique())
    localidade_selecionada = st.sidebar.multiselect(
        'Selecione a Localidade:',
        options=localidades,
        default=localidades,
        placeholder="Selecione uma ou mais localidades"
    )

    # Filtro por Per√≠odo (Data de Gera√ß√£o)
    data_min = df_original['Data de Gera√ß√£o'].min().date()
    data_max = df_original['Data de Gera√ß√£o'].max().date()
    periodo_selecionado = st.sidebar.date_input(
        'Selecione o Per√≠odo de Gera√ß√£o:',
        value=(data_min, data_max),
        min_value=data_min,
        max_value=data_max
    )

    # --- Aplica√ß√£o dos Filtros ---
    df_filtrado = df_original[
        (df_original['Localidade'].isin(localidade_selecionada)) &
        (df_original['Data de Gera√ß√£o'].dt.date >= periodo_selecionado[0]) &
        (df_original['Data de Gera√ß√£o'].dt.date <= periodo_selecionado[1])
    ]

    # --- M√©tricas Principais (KPIs) ---
    st.subheader("Vis√£o Geral do Per√≠odo Selecionado")
    
    total_geradas = df_filtrado.shape[0]
    # CORRE√á√ÉO: Atualiza o status para 'Conclus√£o do Servi√ßo'
    total_concluidas = df_filtrado[df_filtrado['Status'] == 'Conclus√£o do Servi√ßo'].shape[0]
    taxa_conclusao = (total_concluidas / total_geradas) * 100 if total_geradas > 0 else 0

    col1, col2, col3 = st.columns(3)
    col1.metric("Total de OS Geradas", f"{total_geradas:,}".replace(",", "."))
    # CORRE√á√ÉO: Atualiza o label da m√©trica
    col2.metric("Total de OS Conclu√≠das", f"{total_concluidas:,}".replace(",", "."))
    col3.metric("Taxa de Conclus√£o", f"{taxa_conclusao:.2f}%")
    
    st.divider()

    # --- Gr√°ficos Interativos ---
    st.subheader("An√°lises Visuais")

    # --- CORRE√á√ÉO: Define um mapa de cores padr√£o para os status ---
    color_map = {
        'Pendente': 'lightblue',
        'Cancelada': 'red',
        'Conclus√£o do Servi√ßo': '#0047AB', # Azul Cobalto
        'EXECUTADA': 'darkslateblue',
        'GERADA': 'grey'
        # Adicione outros status e cores que possam vir do banco
    }

    # Gr√°fico 1: Volume de OS por Tipo e Status
    df_grafico_status = df_filtrado.groupby(['Tipo de Servi√ßo', 'Status']).size().reset_index(name='Quantidade')

    # Calcula os totais por tipo de servi√ßo para as anota√ß√µes
    df_totais = df_filtrado.groupby('Tipo de Servi√ßo').size().reset_index(name='Total')

    fig_tipo_os = px.bar(
        df_grafico_status,
        x='Tipo de Servi√ßo',
        y='Quantidade',
        color='Status',
        title='Volume de OS por Tipo e Status',
        labels={'Quantidade': 'Quantidade de OS', 'Tipo de Servi√ßo': 'Tipo de Servi√ßo'},
        barmode='stack', # Altera para 'stack' para melhor visualiza√ß√£o de parte-todo
        color_discrete_map=color_map # Aplica o mapa de cores
    )

    # Adiciona o valor de cada segmento dentro da barra
    fig_tipo_os.update_traces(texttemplate='%{y}', textposition='inside')

    # Adiciona anota√ß√µes com o total em cima de cada barra empilhada
    annotations = []
    for _, row in df_totais.iterrows():
        annotations.append(
            dict(
                x=row['Tipo de Servi√ßo'],
                y=row['Total'],
                text=f"<b>{row['Total']}</b>", # Texto da anota√ß√£o (total)
                showarrow=False,
                yshift=10, # Deslocamento vertical para ficar acima da barra
                font=dict(size=14, color="black")
            )
        )

    fig_tipo_os.update_layout(
        legend_title_text='Status da OS',
        annotations=annotations,
        # Aumenta a margem superior para garantir que o total seja vis√≠vel
        margin=dict(t=100)
    )
    st.plotly_chart(fig_tipo_os, use_container_width=True)


    # --- Gr√°fico 2: An√°lise Mensal Detalhada ---
    st.subheader("An√°lise Mensal Detalhada")
    df_grafico_mensal = df_filtrado.copy()
    df_grafico_mensal['M√™s de Gera√ß√£o'] = df_grafico_mensal['Data de Gera√ß√£o'].dt.strftime('%m/%Y')
    
    # Ordena os meses cronologicamente para o filtro
    meses_disponiveis = sorted(
        df_grafico_mensal['M√™s de Gera√ß√£o'].unique(),
        key=lambda x: pd.to_datetime(x, format='%m/%Y')
    )

    # Filtro para selecionar os meses a serem exibidos no gr√°fico
    meses_selecionados = st.multiselect(
        'Selecione os meses para an√°lise:',
        options=meses_disponiveis,
        default=meses_disponiveis,
        placeholder="Selecione um ou mais meses"
    )

    if meses_selecionados:
        df_grafico_filtrado_mensal = df_grafico_mensal[df_grafico_mensal['M√™s de Gera√ß√£o'].isin(meses_selecionados)]
        
        df_plot_mensal = df_grafico_filtrado_mensal.groupby(['M√™s de Gera√ß√£o', 'Tipo de Servi√ßo', 'Status']).size().reset_index(name='Quantidade')
        
        # Calcula os totais para as anota√ß√µes no gr√°fico facetado
        df_totais_mensal = df_grafico_filtrado_mensal.groupby(['M√™s de Gera√ß√£o', 'Tipo de Servi√ßo']).size().reset_index(name='Total')

        fig_detalhe_mensal = px.bar(
            df_plot_mensal,
            x='Tipo de Servi√ßo',
            y='Quantidade',
            color='Status',
            facet_col='M√™s de Gera√ß√£o',
            facet_col_wrap=4, # Quebra a linha a cada 4 meses para n√£o ficar muito largo
            title='An√°lise Mensal de OS por Tipo e Status',
            labels={'Quantidade': 'Quantidade de OS', 'Tipo de Servi√ßo': ''},
            barmode='stack',
            color_discrete_map=color_map # Aplica o mapa de cores
        )
        
        # Adiciona os valores de cada segmento dentro das barras
        fig_detalhe_mensal.update_traces(texttemplate='%{y}', textposition='inside')

        # Adiciona anota√ß√µes com o total em cima de cada barra empilhada
        for i, mes in enumerate(meses_selecionados):
            df_totais_mes = df_totais_mensal[df_totais_mensal['M√™s de Gera√ß√£o'] == mes]
            
            # Constr√≥i a refer√™ncia do eixo para cada subplot
            subplot_num_str = str(i + 1) if i > 0 else ""
            xref = f'x{subplot_num_str}'
            yref = f'y{subplot_num_str}'
            
            for _, row in df_totais_mes.iterrows():
                fig_detalhe_mensal.add_annotation(
                    x=row['Tipo de Servi√ßo'],
                    y=row['Total'],
                    text=f"<b>{row['Total']}</b>",
                    showarrow=False,
                    yshift=5,
                    font=dict(size=12, color="black"),
                    xref=xref,
                    yref=yref
                )

        fig_detalhe_mensal.update_layout(
            legend_title_text='Status da OS',
            margin=dict(t=100) # Aumenta a margem para os totais
        )
        # Renomeia os t√≠tulos dos subplots para remover "M√™s de Gera√ß√£o="
        fig_detalhe_mensal.for_each_annotation(lambda a: a.update(text=a.text.split("=")[-1]) if 'M√™s de Gera√ß√£o' in a.text else ())
        fig_detalhe_mensal.update_yaxes(matches=None, title_text="") # Permite eixos Y independentes e remove t√≠tulos
        fig_detalhe_mensal.update_xaxes(title_text="") # Remove t√≠tulos do eixo X
        st.plotly_chart(fig_detalhe_mensal, use_container_width=True)
    else:
        st.info("Selecione pelo menos um m√™s para visualizar a an√°lise detalhada.")


    st.divider()

    # --- Bot√£o para Exibir/Ocultar Tabela de Dados ---
    if 'show_details' not in st.session_state:
        st.session_state.show_details = False

    if st.button('Mostrar/Ocultar Dados Detalhados'):
        st.session_state.show_details = not st.session_state.show_details

    if st.session_state.show_details:
        st.subheader("Dados Detalhados")
        
        with st.spinner('Carregando dados detalhados...'):
            st.dataframe(df_filtrado.style.format({
                'Data de Gera√ß√£o': '{:%d/%m/%Y %H:%M}',
                'Data de Conclus√£o': lambda x: f'{x:%d/%m/%Y %H:%M}' if pd.notna(x) else 'N/A'
            }))

            csv = convert_df_to_csv(df_filtrado)
            st.download_button(
                label="üì• Download de TODOS os dados filtrados em CSV",
                data=csv,
                file_name='dados_os_diagnostico.csv',
                mime='text/csv',
            )
